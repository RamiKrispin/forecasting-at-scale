---
title: "Time Series Cluster Analysis"
author: "Rami Krispin"
date: "10/26/2023"
format: 
  html:
    code-fold: true
---

```{r}
us_gas <- readRDS(file = "./data/us_gas.RDS")

head(us_gas)



ts_obj <- us_gas |>
    dplyr::select(date, area_name, process, value) |>
    dplyr::mutate(index = tsibble::yearmonth(date)) |>
    tsibble::as_tsibble(index = index, key = c(area_name, process))

us_gas |>
    dplyr::select(process, process_name) |>
    dplyr::distinct()
unique(us_gas$process_name)
keys <- attributes(ts_obj)$key


r <- us_gas |>
    dplyr::filter(process_name == "Residential Consumption") |>
    dplyr::arrange(area_name, process_name, date) |>
    plotly::plot_ly(
        x = ~date, y = ~value,
        color = ~area_name,
        name = ~area_name,
        type = "scatter",
        mode = "line"
    )


i <- us_gas |>
    dplyr::filter(process_name == "Industrial Consumption") |>
    dplyr::arrange(area_name, process_name, date) |>
    plotly::plot_ly(
        x = ~date, y = ~value,
        color = ~area_name,
        name = ~area_name,
        type = "scatter",
        mode = "line"
    )

v <- us_gas |>
    dplyr::filter(process_name == "Vehicle Fuel Consumption") |>
    dplyr::arrange(area_name, process_name, date) |>
    plotly::plot_ly(
        x = ~date, y = ~value,
        color = ~area_name,
        name = ~area_name,
        type = "scatter",
        mode = "line"
    )


plotly::subplot(r, i, nrows = 2)
```

Create features

``` {r}
features_df <- NULL
features_df <- lapply(1:nrow(keys), function(i) {
    d <- NULL
    print(i)
    d <- ts_obj |>
        dplyr::filter(
            area_name == keys$area_name[i],
            process == keys$process[i]
        )

    s <- TRUE
    # Check for missing values and zeros
    z <- which(d$value == 0)

    m <- which(is.na(d$value))
    if (length(m) > 0) {
        if (length(m) < nrow(d) * 0.1 && length(z) == 0) {
            if (any(diff(m) == 1)) {
                x <- m[which(diff(m) == 1)]
                for (n in x) {
                    d$value[n] <- (d$value[n - 12] + d$value[n - 24] + d$value[n - 36]) / 3
                }

                y <- which(is.na(d$value))
                if (length(y) > 0) {
                    for (n in y) {
                        if (n < nrow(d)) {
                            d$value[n] <- (d$value[n - 1] + d$value[n + 1]) / 2
                        } else {
                            d$value[n] <- (d$value[n - 12] + d$value[n - 24]) / 2
                        }
                    }
                }
            } else {
                for (n in m) {
                    if (n < nrow(d)) {
                        d$value[n] <- (d$value[n - 1] + d$value[n + 1]) / 2
                    } else {
                        d$value[n] <- (d$value[n - 12] + d$value[n - 24]) / 2
                    }
                }
            }
        } else {
            s <- FALSE
        }
    }


    if (s) {
        f <- tsfeatures::tsfeatures(d$value)
        f$arch_stat <- tsfeatures::arch_stat(d$value)
        f <- cbind(f, t(as.data.frame(tsfeatures::autocorr_features(d$value))))
        f$nonlinearity <- tsfeatures::nonlinearity(d$value)
        f <- cbind(f, t(as.data.frame(tsfeatures::pacf_features(d$value))))

        row.names(f) <- NULL
        f$area_name <- keys$area_name[i]
        f$process <- keys$process[i]
        f$nperiods <- NULL
        f$frequency <- NULL
        f$seasonal_period <- NULL
        f$success <- TRUE
    } else {
        f <- data.frame(success = FALSE)
    }

    return(f)
}) |>
    dplyr::bind_rows()



head(features_df)
nrow(features_df)
table(features_df$success)

```

``` {r}
features_clean <- na.omit(features_df)
table(features_clean$success)

features_clean <- features_clean |>
    dplyr::filter(success) |>
    dplyr::select(-success)


pca <- features_clean |>
    dplyr::select(-area_name, -process) |>
    prcomp(scale = TRUE)

features <- cbind(features_clean, as.data.frame(pca$x[, 1:2]))

head(features)
```


``` {r}
plotly::plot_ly(features,
    x = ~PC1,
    y = ~PC2,
    color = ~process,
    type = "3D",
    mode = "markers"
)

plotly::plot_ly(features,
    x = ~PC1,
    y = ~PC2,
    color = ~trend,
    type = "scatter",
    mode = "markers"
)

```


``` {r}
plotly::plot_ly(features,
    x = ~PC1,
    y = ~PC2,
    z = ~PC3,
    text = paste(""),
    color = ~process
)


plotly::plot_ly(features,
    x = ~PC1,
    y = ~PC2,
    z = ~PC3,
    color = ~trend
)
```